import { Worker, NEAR, NearAccount } from "near-workspaces";
import anyTest, { TestFn } from "ava";
import { arrayify } from "ethers/lib/utils";

const REDSTONE_PAYLOAD_HEX_STR =
  "4254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d1e382100045544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e90edd00001812f2590c000000020000002c1296a449f5d353c8b04eb389f33a583ee79449cca6e366900042f19f2521e722a410929223231905839c00865af68738f1a202478d87dc33675ea5824f343901b4254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d1e382100045544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e90edd00001812f2590c000000020000002dbbf8a0e6b1c9a56a4a0ef7089ef2a3f74fbd21fbd5c7c8192b70084004b4f6d37427507c4fff835f74fd4d000b6830ed296e207f49831b96f90a4f4e60820ee1c0002312e312e3223746573742d646174612d66656564000014000002ed57011e0000";

// ========================== RedStone payload structure (hex) ==========================
//   "4254430000000000000000000000000000000000000000000000000000000000" + // bytes32("BTC")
//   "000000000000000000000000000000000000000000000000000003d1e3821000" + // 42000 * 10^8
//   "4554480000000000000000000000000000000000000000000000000000000000" + // bytes32("ETH")
//   "0000000000000000000000000000000000000000000000000000002e90edd000" + // 2000 * 10^8
//   "01812f2590c0" + // timestamp (1654353400000 in hex)
//   "00000020" + // data points value byte size (32 in hex)
//   "000002" + // data points count
//   "c1296a449f5d353c8b04eb389f33a583ee79449cca6e366900042f19f2521e722a410929223231905839c00865af68738f1a202478d87dc33675ea5824f343901b" + // signature of the first signer
//   "4254430000000000000000000000000000000000000000000000000000000000" + // bytes32("BTC")
//   "000000000000000000000000000000000000000000000000000003d1e3821000" + // 42000 * 10^8
//   "4554480000000000000000000000000000000000000000000000000000000000" + // bytes32("ETH")
//   "0000000000000000000000000000000000000000000000000000002e90edd000" + // 2000 * 10^8
//   "01812f2590c0" + // timestamp (1654353400000 in hex)
//   "00000020" + // data points value byte size (32 in hex)
//   "000002" + // data points count
//   "dbbf8a0e6b1c9a56a4a0ef7089ef2a3f74fbd21fbd5c7c8192b70084004b4f6d37427507c4fff835f74fd4d000b6830ed296e207f49831b96f90a4f4e60820ee1c" + // signature of the second signer
//   "0002" + // data packages count
//   "312e312e3223746573742d646174612d66656564" + // unsigned metadata toUtf8Bytes("1.1.2#test-data-feed")
//   "000014" + // unsigned metadata byte size (20 in hex)
//   "000002ed57011e0000" // RedStone marker

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();
  const root = worker.rootAccount;

  // some test accounts
  const alice = await root.createSubAccount("alice", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });
  const contract = await root.createSubAccount("contract", {
    initialBalance: NEAR.parse("30 N").toJSON(),
  });

  // Get wasm file path from package.json test script in folder above
  await contract.deploy(process.argv[2]);

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { contract, alice };
});

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log("Failed to stop the Sandbox:", error);
  });
});

test("can set oracle value", async (t) => {
  const { alice, contract } = t.context.accounts;

  const oraclevalueBefore = await contract.view("get_oracle_value", {});
  console.log({ oraclevalueBefore });
  t.is(oraclevalueBefore, "0");

  await alice.call(contract, "set_oracle_value", {
    redstone_payload: Object.values(arrayify(`0x${REDSTONE_PAYLOAD_HEX_STR}`)),
  });

  const oraclevalueAfter = await contract.view("get_oracle_value", {});
  console.log({ oraclevalueAfter });
  t.is(oraclevalueAfter, "42");
});

// test("can be incremented", async (t) => {
//   const { alice, contract } = t.context.accounts;
//   const startCounter: number = await contract.view("get_num", {});
//   await alice.call(contract, "increment", {});
//   const endCounter = await contract.view("get_num", {});
//   t.is(endCounter, startCounter + 1);
// });

// test("can be decremented", async (t) => {
//   const { alice, contract } = t.context.accounts;
//   await alice.call(contract, "increment", {});
//   const startCounter: number = await contract.view("get_num", {});
//   await alice.call(contract, "decrement", {});
//   const endCounter = await contract.view("get_num", {});
//   t.is(endCounter, startCounter - 1);
// });

// test("can be reset", async (t) => {
//   const { alice, contract } = t.context.accounts;
//   await alice.call(contract, "increment", {});
//   await alice.call(contract, "increment", {});
//   await alice.call(contract, "reset", {});
//   const endCounter = await contract.view("get_num", {});
//   t.is(endCounter, 0);
// });

const x = {
  redstone_payload: {
    "0": 66,
    "1": 84,
    "2": 67,
    "3": 0,
    "4": 0,
    "5": 0,
    "6": 0,
    "7": 0,
    "8": 0,
    "9": 0,
    "10": 0,
    "11": 0,
    "12": 0,
    "13": 0,
    "14": 0,
    "15": 0,
    "16": 0,
    "17": 0,
    "18": 0,
    "19": 0,
    "20": 0,
    "21": 0,
    "22": 0,
    "23": 0,
    "24": 0,
    "25": 0,
    "26": 0,
    "27": 0,
    "28": 0,
    "29": 0,
    "30": 0,
    "31": 0,
    "32": 0,
    "33": 0,
    "34": 0,
    "35": 0,
    "36": 0,
    "37": 0,
    "38": 0,
    "39": 0,
    "40": 0,
    "41": 0,
    "42": 0,
    "43": 0,
    "44": 0,
    "45": 0,
    "46": 0,
    "47": 0,
    "48": 0,
    "49": 0,
    "50": 0,
    "51": 0,
    "52": 0,
    "53": 0,
    "54": 0,
    "55": 0,
    "56": 0,
    "57": 0,
    "58": 3,
    "59": 209,
    "60": 227,
    "61": 130,
    "62": 16,
    "63": 0,
    "64": 69,
    "65": 84,
    "66": 72,
    "67": 0,
    "68": 0,
    "69": 0,
    "70": 0,
    "71": 0,
    "72": 0,
    "73": 0,
    "74": 0,
    "75": 0,
    "76": 0,
    "77": 0,
    "78": 0,
    "79": 0,
    "80": 0,
    "81": 0,
    "82": 0,
    "83": 0,
    "84": 0,
    "85": 0,
    "86": 0,
    "87": 0,
    "88": 0,
    "89": 0,
    "90": 0,
    "91": 0,
    "92": 0,
    "93": 0,
    "94": 0,
    "95": 0,
    "96": 0,
    "97": 0,
    "98": 0,
    "99": 0,
    "100": 0,
    "101": 0,
    "102": 0,
    "103": 0,
    "104": 0,
    "105": 0,
    "106": 0,
    "107": 0,
    "108": 0,
    "109": 0,
    "110": 0,
    "111": 0,
    "112": 0,
    "113": 0,
    "114": 0,
    "115": 0,
    "116": 0,
    "117": 0,
    "118": 0,
    "119": 0,
    "120": 0,
    "121": 0,
    "122": 0,
    "123": 46,
    "124": 144,
    "125": 237,
    "126": 208,
    "127": 0,
    "128": 1,
    "129": 129,
    "130": 47,
    "131": 37,
    "132": 144,
    "133": 192,
    "134": 0,
    "135": 0,
    "136": 0,
    "137": 32,
    "138": 0,
    "139": 0,
    "140": 2,
    "141": 193,
    "142": 41,
    "143": 106,
    "144": 68,
    "145": 159,
    "146": 93,
    "147": 53,
    "148": 60,
    "149": 139,
    "150": 4,
    "151": 235,
    "152": 56,
    "153": 159,
    "154": 51,
    "155": 165,
    "156": 131,
    "157": 238,
    "158": 121,
    "159": 68,
    "160": 156,
    "161": 202,
    "162": 110,
    "163": 54,
    "164": 105,
    "165": 0,
    "166": 4,
    "167": 47,
    "168": 25,
    "169": 242,
    "170": 82,
    "171": 30,
    "172": 114,
    "173": 42,
    "174": 65,
    "175": 9,
    "176": 41,
    "177": 34,
    "178": 50,
    "179": 49,
    "180": 144,
    "181": 88,
    "182": 57,
    "183": 192,
    "184": 8,
    "185": 101,
    "186": 175,
    "187": 104,
    "188": 115,
    "189": 143,
    "190": 26,
    "191": 32,
    "192": 36,
    "193": 120,
    "194": 216,
    "195": 125,
    "196": 195,
    "197": 54,
    "198": 117,
    "199": 234,
    "200": 88,
    "201": 36,
    "202": 243,
    "203": 67,
    "204": 144,
    "205": 27,
    "206": 66,
    "207": 84,
    "208": 67,
    "209": 0,
    "210": 0,
    "211": 0,
    "212": 0,
    "213": 0,
    "214": 0,
    "215": 0,
    "216": 0,
    "217": 0,
    "218": 0,
    "219": 0,
    "220": 0,
    "221": 0,
    "222": 0,
    "223": 0,
    "224": 0,
    "225": 0,
    "226": 0,
    "227": 0,
    "228": 0,
    "229": 0,
    "230": 0,
    "231": 0,
    "232": 0,
    "233": 0,
    "234": 0,
    "235": 0,
    "236": 0,
    "237": 0,
    "238": 0,
    "239": 0,
    "240": 0,
    "241": 0,
    "242": 0,
    "243": 0,
    "244": 0,
    "245": 0,
    "246": 0,
    "247": 0,
    "248": 0,
    "249": 0,
    "250": 0,
    "251": 0,
    "252": 0,
    "253": 0,
    "254": 0,
    "255": 0,
    "256": 0,
    "257": 0,
    "258": 0,
    "259": 0,
    "260": 0,
    "261": 0,
    "262": 0,
    "263": 0,
    "264": 3,
    "265": 209,
    "266": 227,
    "267": 130,
    "268": 16,
    "269": 0,
    "270": 69,
    "271": 84,
    "272": 72,
    "273": 0,
    "274": 0,
    "275": 0,
    "276": 0,
    "277": 0,
    "278": 0,
    "279": 0,
    "280": 0,
    "281": 0,
    "282": 0,
    "283": 0,
    "284": 0,
    "285": 0,
    "286": 0,
    "287": 0,
    "288": 0,
    "289": 0,
    "290": 0,
    "291": 0,
    "292": 0,
    "293": 0,
    "294": 0,
    "295": 0,
    "296": 0,
    "297": 0,
    "298": 0,
    "299": 0,
    "300": 0,
    "301": 0,
    "302": 0,
    "303": 0,
    "304": 0,
    "305": 0,
    "306": 0,
    "307": 0,
    "308": 0,
    "309": 0,
    "310": 0,
    "311": 0,
    "312": 0,
    "313": 0,
    "314": 0,
    "315": 0,
    "316": 0,
    "317": 0,
    "318": 0,
    "319": 0,
    "320": 0,
    "321": 0,
    "322": 0,
    "323": 0,
    "324": 0,
    "325": 0,
    "326": 0,
    "327": 0,
    "328": 0,
    "329": 46,
    "330": 144,
    "331": 237,
    "332": 208,
    "333": 0,
    "334": 1,
    "335": 129,
    "336": 47,
    "337": 37,
    "338": 144,
    "339": 192,
    "340": 0,
    "341": 0,
    "342": 0,
    "343": 32,
    "344": 0,
    "345": 0,
    "346": 2,
    "347": 219,
    "348": 191,
    "349": 138,
    "350": 14,
    "351": 107,
    "352": 28,
    "353": 154,
    "354": 86,
    "355": 164,
    "356": 160,
    "357": 239,
    "358": 112,
    "359": 137,
    "360": 239,
    "361": 42,
    "362": 63,
    "363": 116,
    "364": 251,
    "365": 210,
    "366": 31,
    "367": 189,
    "368": 92,
    "369": 124,
    "370": 129,
    "371": 146,
    "372": 183,
    "373": 0,
    "374": 132,
    "375": 0,
    "376": 75,
    "377": 79,
    "378": 109,
    "379": 55,
    "380": 66,
    "381": 117,
    "382": 7,
    "383": 196,
    "384": 255,
    "385": 248,
    "386": 53,
    "387": 247,
    "388": 79,
    "389": 212,
    "390": 208,
    "391": 0,
    "392": 182,
    "393": 131,
    "394": 14,
    "395": 210,
    "396": 150,
    "397": 226,
    "398": 7,
    "399": 244,
    "400": 152,
    "401": 49,
    "402": 185,
    "403": 111,
    "404": 144,
    "405": 164,
    "406": 244,
    "407": 230,
    "408": 8,
    "409": 32,
    "410": 238,
    "411": 28,
    "412": 0,
    "413": 2,
    "414": 49,
    "415": 46,
    "416": 49,
    "417": 46,
    "418": 50,
    "419": 35,
    "420": 116,
    "421": 101,
    "422": 115,
    "423": 116,
    "424": 45,
    "425": 100,
    "426": 97,
    "427": 116,
    "428": 97,
    "429": 45,
    "430": 102,
    "431": 101,
    "432": 101,
    "433": 100,
    "434": 0,
    "435": 0,
    "436": 20,
    "437": 0,
    "438": 0,
    "439": 2,
    "440": 237,
    "441": 87,
    "442": 1,
    "443": 30,
    "444": 0,
    "445": 0,
  },
};
